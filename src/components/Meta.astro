---
import { getImage } from "astro:assets";
import faviconSvgSrc from "@images/icon.svg";
import faviconSrc from "@images/icon.png";
import siteconfig from "@data/site.json";
import type { MetaProps, LanguageConfig } from '@/types/meta';
import type { LanguageLabels } from "@/utils/base";
interface Props extends MetaProps {}
const labels: LanguageLabels = siteconfig.supportedLangLabels;
const OG = siteconfig.OG
const SEO =siteconfig.SEO
const SITE =siteconfig.SITE
// Default properties
const defaultProps: Required<MetaProps> = {
  title: SITE.title,
  meta: SITE.description,
  structuredData: SEO.structuredData,
  og: {
    title: OG.title,
    description: OG.description,
    image: OG.image,
    locale: 'en_US',
    type: 'website',
    siteName: SITE.title
  },
  twitter: {
    card: 'summary_large_image'
  },
  canonical: Astro.url.href,
  alternateLanguages: siteconfig.supportedLanguages.map(lang => ({
    code: lang,
    prefix: lang,
    label: labels[lang]
  })),
  favicon: {
    svg: faviconSvgSrc,
    png: faviconSrc,
    sizes: {
      apple: 180,
      favicon: 32
    }
  },
  themeColor: '#facc15'
};

// Merge props with defaults
const props = {
  ...defaultProps,
  ...Astro.props
} as Required<MetaProps>;
// Process social image
const socialImageRes = props.og.image && await getImage({
  src: props.og.image as ImageMetadata,
  width: 1200,
  height: 600,
});
const socialImage = socialImageRes 
? new URL(socialImageRes.src, Astro.url.origin).href
: '';

// Generate favicon images
const faviconSvg = props.favicon?.svg && await getImage({
  src: props.favicon.svg,
  format: "svg",
});

const appleTouchIcon = props.favicon?.png && await getImage({
  src: props.favicon.png,
  width: props.favicon.sizes?.apple || 180,
  height: props.favicon.sizes?.apple || 180,
  format: "png",
});

// Generate alternate language links
function createHref(lang: LanguageConfig, path: string): string {
  const hasPrefix = path.startsWith(`/${lang.prefix}/`);
  const basePath = hasPrefix ? path : `/${lang.prefix}${path}`;
  const normalizedPath = basePath.replace(/\/\/+/g, "/");
  return new URL(normalizedPath, Astro.site).href;
}

const alternateLanguageLinks = props.alternateLanguages
  .map(lang => {
    const href = createHref(lang, Astro.url.pathname);
    return `<link rel="alternate" hreflang="${lang.code}" href="${href}" />`;
  })
  .join("\n");
---

<!-- Structured Data -->
{props.structuredData && (
  <script
    type="application/ld+json"
    set:html={JSON.stringify(props.structuredData)}
  />
)}

<!-- Basic Meta Tags -->
<meta charset="utf-8" />
<meta content={props.meta} name="description" />
<meta name="web_author" content={SITE.author} />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0"
/>
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<link rel="canonical" href={props.canonical} />
<Fragment set:html={alternateLanguageLinks} />

<!-- Open Graph Meta Tags -->
<meta property="og:locale" content={props.og.locale} />
<meta property="og:url" content={Astro.site} />
<meta property="og:type" content={props.og.type} />
<meta property="og:title" content={props.og.title} />
<meta property="og:site_name" content={props.og.siteName} />
<meta property="og:description" content={props.og.description} />
<meta property="og:image" content={socialImage} />
<meta content="1200" property="og:image:width" />
<meta content="600" property="og:image:height" />
<meta content="image/png" property="og:image:type" />

<!-- Twitter Meta Tags -->
<meta name="twitter:card" content={props.twitter.card} />
<meta property="twitter:domain" content={Astro.site} />
<meta property="twitter:url" content={Astro.url} />
<meta name="twitter:title" content={props.twitter.title || props.og.title} />
<meta name="twitter:description" content={props.twitter.description || props.og.description} />
<meta name="twitter:image" content={props.twitter.image || socialImage} />

<!-- Manifest and Sitemap -->
<link rel="manifest" href="/manifest.json" />
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Favicons -->
<link href="/favicon.ico" rel="icon" sizes="any" type="image/x-icon" />
{faviconSvg && (
  <link href={faviconSvg.src} rel="icon" type="image/svg+xml" sizes="any" />
)}
<meta name="mobile-web-app-capable" content="yes" />
{appleTouchIcon && (
  <>
    <link href={appleTouchIcon.src} rel="apple-touch-icon" />
    <link href={appleTouchIcon.src} rel="shortcut icon" />
  </>
)}
<!-- Theme Color -->
<meta name="theme-color" content={props.themeColor} />
