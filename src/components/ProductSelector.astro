---
import { processLiterals } from '@utils/literalProcessor';
import type { CollectionEntry } from 'astro:content';
import { getImage } from 'astro:assets';

// Define types based on your collections schema
type Product = CollectionEntry<'products'>;
type SpecEntry = CollectionEntry<'specs'>;

interface ProductData {
  id: string;
  name: string;
  description: string;
  category: string;
  image?: string;
  price?: string;
}

interface Props {
  products: (Product | SpecEntry)[];
  initialSelected?: string[];
  onChange?: (selectedIds: string[]) => void;
}

// Helper function to determine if entry is a spec
function isSpecEntry(entry: Product | SpecEntry): entry is SpecEntry {
  return 'productId' in entry.data;
}

// Process product data
async function getProductData(entry: Product | SpecEntry): Promise<ProductData> {
  if (isSpecEntry(entry)) {
    // Handle spec entry
    return {
      id: entry.data.productId,
      name: entry.data.title,
      description: entry.data.description,
      category: entry.data.category,
      image: entry.data.image,
      price: entry.data.price
    };
  } else {
    // Handle product entry
    const processedImage = entry.data.main.imgCard ? await getImage({
      src: entry.data.main.imgCard,
      width: 64,
      height: 64
    }) : null;

    return {
      id: entry.data.main.id.toString(),
      name: entry.data.title,
      description: entry.data.description,
      category: entry.data.category,
      image: processedImage?.src
    };
  }
}

const {
  products,
  initialSelected = products.map(p => isSpecEntry(p) ? p.data.productId : p.data.main.id.toString()),
  onChange
} = processLiterals<Props>(Astro.props);

// Process all products
const processedProducts = await Promise.all(products.map(getProductData));
---

<div class="products-selector">
  {processedProducts.map(product => (
    <div class="product-item">
      <input
        type="checkbox"
        id={product.id}
        name="product"
        value={product.id}
        checked={initialSelected.includes(product.id)}
        class="hidden peer"
      />
      <label
        for={product.id}
        class="flex items-center gap-3 p-3 rounded-lg border-2 border-transparent bg-white hover:bg-gray-50 peer-checked:border-primary-500 peer-checked:bg-primary-50 transition-all cursor-pointer"
      >
        {product.image && (
          <img
            src={product.image}
            alt={product.name}
            class="w-16 h-16 object-contain rounded bg-gray-50"
            loading="lazy"
          />
        )}
        <div class="flex flex-col">
          <span class="font-medium text-gray-900 dark:text-white">
            {product.name}
          </span>
          {product.price && (
            <span class="text-sm text-gray-500 dark:text-gray-400">
              {product.price}
            </span>
          )}
        </div>
      </label>
    </div>
  ))}
</div>

<script>
  import { dispatchProductsSelected } from '@/utils/events';

  function updateSelection() {
    const checkboxes = document.querySelectorAll<HTMLInputElement>('.products-selector input[type="checkbox"]');
    const selectedIds = Array.from(checkboxes)
      .filter(cb => cb.checked)
      .map(cb => cb.value);
    
    dispatchProductsSelected(selectedIds);
  }

  // Initialize
  updateSelection();

  // Add event listeners
  document.querySelectorAll('.products-selector input[type="checkbox"]')
    .forEach(checkbox => {
      checkbox.addEventListener('change', updateSelection);
    });

  // Clean up
  document.addEventListener('astro:before-swap', () => {
    document.querySelectorAll('.products-selector input[type="checkbox"]')
      .forEach(checkbox => {
        checkbox.removeEventListener('change', updateSelection);
      });
  });
</script>

<style>
  .products-selector {
    @apply grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3;
  }

  .product-item {
    @apply relative;
  }

  /* Animation */
  .product-item {
    @apply opacity-0 translate-y-4;
    animation: fadeInUp 0.5s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(1rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Stagger children animations */
  .product-item:nth-child(2) { animation-delay: 0.1s; }
  .product-item:nth-child(3) { animation-delay: 0.2s; }
  .product-item:nth-child(4) { animation-delay: 0.3s; }
  .product-item:nth-child(5) { animation-delay: 0.4s; }
  .product-item:nth-child(6) { animation-delay: 0.5s; }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .product-item {
      animation: none;
      opacity: 1;
      transform: none;
    }
  }
</style>