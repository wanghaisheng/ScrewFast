---
import { processLiterals } from '@utils/literalProcessor';

import type { CollectionEntry } from 'astro:content';
import type { SupportedLanguage } from '@utils/base';
import { processImage, getImageSrc, type ProcessedImage } from "@utils/imageProcessing";
import OptimizedImage from '@/components/OptimizedImage.astro';

interface Props {
  product: CollectionEntry<'products'>;
  lang: SupportedLanguage;
}

const { product, lang } = processLiterals<Props>(Astro.props);
  const { Content } = await product.render();

// Process main images
const mainImage = product.data.main.imgMain;
const cardImage = product.data.main.imgCard;

// Process blueprint images if they exist
const blueprint1 = product.data.blueprints.first ? 
product.data.blueprints.first : null;
const blueprint2 = product.data.blueprints.second ? 
  product.data.blueprints.second : null;
---

<article class="prose dark:prose-invert max-w-none">
  <div class="grid md:grid-cols-2 gap-8">
    <!-- Product images -->
    <div class="product-images space-y-4">
      <div class="main-image relative rounded-lg overflow-hidden">
        {mainImage && (
          <OptimizedImage
            src={getImageSrc(mainImage.src)}
            alt={product.data.main.imgAlt}
            width={mainImage.width}
            height={mainImage.height}
            class="w-full h-auto"
          />
        )}
      </div>
      
      <!-- Tabs images -->
      {product.data.tabs && cardImage && (
        <div class="tabs-gallery grid grid-cols-3 gap-4">
          {product.data.tabs.map(tab => (
            <button 
              class="tab-button relative rounded-lg overflow-hidden"
              data-tab={tab.dataTab}
            >
              <OptimizedImage
                src={getImageSrc(cardImage.src)}
                alt={tab.title}
                width={cardImage.width}
                height={cardImage.height}
                class="w-full h-auto"
              />
              <div class="absolute inset-0 bg-black/50 flex items-center justify-center">
                <span class="text-white text-sm font-medium">
                  {tab.title}
                </span>
              </div>
            </button>
          ))}
        </div>
      )}
    </div>

    <!-- Product info -->
    <div class="product-info space-y-6">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
        {product.data.title}
      </h1>

      <p class="text-lg text-gray-600 dark:text-gray-300">
        {product.data.description}
      </p>

      <!-- Category -->
      <div class="inline-block px-3 py-1 bg-primary-100 text-primary-800 rounded-full text-sm">
        {product.data.category}
      </div>

      <!-- Long description -->
      <div class="space-y-4">
        <h2 class="text-xl font-semibold">
          {product.data.longDescription.title}
        </h2>
        <p class="text-gray-600 dark:text-gray-300">
          {product.data.longDescription.subTitle}
        </p>
        <a 
          href={product.data.longDescription.btnURL}
          class="inline-block bg-primary-500 text-white px-6 py-2 rounded-lg hover:bg-primary-600 transition-colors"
        >
          {product.data.longDescription.btnTitle}
        </a>
      </div>

      <!-- Description List -->
      <div class="grid gap-4 sm:grid-cols-2">
        {product.data.descriptionList.map(item => (
          <div class="space-y-1">
            <h3 class="font-medium text-gray-900 dark:text-white">
              {item.title}
            </h3>
            <p class="text-gray-600 dark:text-gray-300">
              {item.subTitle}
            </p>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Specifications -->
  <div class="mt-12 grid md:grid-cols-2 gap-8">
    <div class="space-y-4">
      <h2 class="text-2xl font-bold">Specifications</h2>
      {product.data.specificationsLeft.map(spec => (
        <div class="border-b border-gray-200 dark:border-gray-700 py-3">
          <h3 class="font-medium text-gray-900 dark:text-white">
            {spec.title}
          </h3>
          <p class="text-gray-600 dark:text-gray-300">
            {spec.subTitle}
          </p>
        </div>
      ))}
    </div>

    {product.data.specificationsRight && (
      <div class="space-y-4">
        {product.data.specificationsRight.map(spec => (
          <div class="border-b border-gray-200 dark:border-gray-700 py-3">
            <h3 class="font-medium text-gray-900 dark:text-white">
              {spec.title}
            </h3>
            <p class="text-gray-600 dark:text-gray-300">
              {spec.subTitle}
            </p>
          </div>
        ))}
      </div>
    )}
  </div>

  <!-- Table Data -->
  {product.data.tableData && (
    <div class="mt-12 overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead>
          <tr>
            {product.data.tableData[0].feature.map(header => (
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                {header}
              </th>
            ))}
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
          {product.data.tableData[0].description.map(row => (
            <tr>
              {row.map(cell => (
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  {cell}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )}

  <!-- Blueprints -->
  {(blueprint1 || blueprint2) && (
    <div class="mt-12 grid md:grid-cols-2 gap-8">
      {blueprint1 && (
        <div class="rounded-lg overflow-hidden">
          <OptimizedImage
            src={getImageSrc(blueprint1.src)}
            alt="Blueprint 1"
            width={blueprint1.width}
            height={blueprint1.height}
            class="w-full h-auto"
          />
        </div>
      )}
      {blueprint2 && (
        <div class="rounded-lg overflow-hidden">
          <OptimizedImage
            src={getImageSrc(blueprint2.src)}
            alt="Blueprint 2"
            width={blueprint2.width}
            height={blueprint2.height}
            class="w-full h-auto"
          />
        </div>
      )}
    </div>
  )}

  <!-- Main Content -->
  <div class="mt-12">
    <div class="prose dark:prose-invert max-w-none">
      <Content />
    </div>
  </div>
</article>

<script>
  // Initialize tab switching
  const initTabs = () => {
    const tabButtons = document.querySelectorAll<HTMLButtonElement>('.tab-button');
    const mainImage = document.querySelector<HTMLImageElement>('.main-image img');

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabImage = button.querySelector<HTMLImageElement>('img');
        if (mainImage && tabImage) {
          const newSrc = tabImage.getAttribute('src');
          const newAlt = tabImage.getAttribute('alt');
          
          if (newSrc) mainImage.setAttribute('src', newSrc);
          if (newAlt) mainImage.setAttribute('alt', newAlt);
        }
      });
    });
  };

  // Initialize on page load
  document.addEventListener('astro:page-load', initTabs);
</script>

<style>
  /* Previous styles remain the same */
</style>