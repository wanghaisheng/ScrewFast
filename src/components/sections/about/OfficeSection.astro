---
import { processLiterals } from '@utils/literalProcessor';
import { Image } from "astro:assets";
import { processImage, type ProcessedImage, getImageSrc } from "@utils/imageProcessing";
import OptimizedImage from '@components/OptimizedImage.astro';

interface OfficeImage {
  src: string;
  alt: string;
  caption: string;
}

interface Props {
  title: string;
  description: string;
  images: OfficeImage[];
}

const { title, description, images } = processLiterals<Props>(Astro.props);

// Process images with proper async handling
const processedImages = await Promise.all(
  images.map(async (image) => {
    const processed = await processImage(image.src, {
      width: 800,
      height: 450, // 16:9 aspect ratio
      text: image.alt,
      bgColor: 'f7f6f6',
      textColor: '6d6e71'
    });
    
    return processed ? {
      ...image,
      processed
    } : null;
  })
).then(results => results.filter((result): result is { 
  src: string; 
  alt: string; 
  caption: string; 
  processed: ProcessedImage; 
}  => result !== null));
---

<section class="w-full bg-neutral-100 dark:bg-neutral-900">
  <div class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
    <div class="mx-auto max-w-2xl text-center mb-10">
      <h2 class="text-3xl font-bold text-neutral-800 dark:text-neutral-200">
        {title}
      </h2>
      <p class="mt-4 text-neutral-600 dark:text-neutral-400">
        {description}
      </p>
    </div>
  </div>

  <!-- Slider Section - Full Width Background -->
  <div class="w-full bg-neutral-100 dark:bg-neutral-900">
    <div class="swiper office-slider">
      <div class="swiper-wrapper">
        {processedImages.map(image => (
          <div class="swiper-slide flex justify-center">
            <div class="relative w-full max-w-[800px] aspect-[16/9] overflow-hidden rounded-lg">
              <OptimizedImage
                src={getImageSrc(image.processed.src)}
                alt={image.alt}
                width={image.processed.width}
                height={image.processed.height}
                format={image.processed.format}
                class="w-full h-full object-cover transition-transform duration-300"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex items-end">
                <p class="p-6 text-white text-lg font-medium">
                  {image.caption}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Navigation buttons -->
      <div class="swiper-button-prev"></div>
      <div class="swiper-button-next"></div>
      
      <!-- Pagination -->
      <div class="swiper-pagination"></div>
    </div>
  </div>
</section>

<!-- Swiper CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />

<script>
  import Swiper from 'swiper/bundle';
  import 'swiper/css/bundle';

  // Initialize Swiper
  const initSwiper = () => {
    new Swiper('.office-slider', {
      // Basic configuration
      slidesPerView: 'auto',
      centeredSlides: true,
      spaceBetween: 30,
      loop: true,
      
      // Autoplay
      autoplay: {
        delay: 5000,
        disableOnInteraction: false,
      },
      
      // Navigation
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      
      // Pagination
      pagination: {
        el: '.swiper-pagination',
        clickable: true,
      },
      
      // Responsive breakpoints
      breakpoints: {
        640: {
          spaceBetween: 20,
        },
        768: {
          spaceBetween: 30,
        },
        1024: {
          spaceBetween: 40,
        },
      },
    });
  };

  // Initialize when the document is ready
  document.addEventListener('astro:page-load', initSwiper);
</script>

<style>
  /* Swiper Custom Styles */
  .swiper {
    padding: 2rem 0 4rem 0;
  }

  .swiper-slide {
    width: auto;
    max-width: 800px;
    transition: transform 0.3s ease;
  }

  :root {
    --swiper-theme-color: #f97316;
  }

  .swiper-button-next,
  .swiper-button-prev {
    color: #f97316;
    background-color: white;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .swiper-button-next:hover,
  .swiper-button-prev:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 8px -1px rgb(0 0 0 / 0.2);
  }

  .swiper-button-next::after,
  .swiper-button-prev::after {
    font-size: 1.2rem;
  }

  .swiper-pagination-bullet {
    width: 10px;
    height: 10px;
    transition: transform 0.2s ease;
  }

  .swiper-pagination-bullet:hover {
    transform: scale(1.2);
  }

  .swiper-pagination-bullet-active {
    background-color: #f97316;
  }

  /* Dark Mode Styles */
  :global(.dark) .swiper-button-next,
  :global(.dark) .swiper-button-prev {
    background-color: #1f2937;
    color: #f97316;
  }

  /* Hover Effects */
  .swiper-slide:hover {
    transform: scale(1.02);
  }

  /* Mobile Optimization */
  @media (max-width: 640px) {
    .swiper-button-next,
    .swiper-button-prev {
      width: 2.5rem;
      height: 2.5rem;
    }

    .swiper-button-next::after,
    .swiper-button-prev::after {
      font-size: 1rem;
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .swiper-slide,
    .swiper-button-next,
    .swiper-button-prev,
    .swiper-pagination-bullet {
      transition: none;
    }
  }
</style>