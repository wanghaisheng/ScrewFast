---
import { processLiterals } from '@utils/literalProcessor';
import { Image } from "astro:assets";
import { processImage, type ProcessedImage, getImageSrc } from "@utils/imageProcessing";
import OptimizedImage from '@components/OptimizedImage.astro';

interface TeamMember {
  name: string;
  position: string;
  bio: string;
  image: string;
}

interface Props {
  title: string;
  description: string;
  members: TeamMember[];
}

const { title, description, members } = processLiterals<Props>(Astro.props);

// Process all member images
const processedMembers = await Promise.all(
  members.map(async (member) => ({
    ...member,
    processedImage: member.image 
      ? await processImage(member.image, {
          width: 256, // Adjusted for profile image
          height: 256,
          text: member.name,
          bgColor: 'f7f6f6',
          textColor: '6d6e71'
        })
      : null
  }))
);
---

<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
  <div class="mx-auto max-w-2xl text-center mb-10">
    <h2 class="text-3xl font-bold text-neutral-800 dark:text-neutral-200">
      {title}
    </h2>
    <p class="mt-4 text-neutral-600 dark:text-neutral-400">
      {description}
    </p>
  </div>

  <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-4">
    {processedMembers.map(member => (
      <div class="text-center">
        <div class="relative mb-4 inline-block">
          {member.processedImage && (
            <OptimizedImage
              src={getImageSrc(member.processedImage.src)}
              alt={member.name}
              width={member.processedImage.width}
              height={member.processedImage.height}
              format={member.processedImage.format}
              class="w-32 h-32 rounded-full object-cover"
            />
          )}
          <div class="absolute inset-0 rounded-full bg-gradient-to-b from-transparent to-black/50"></div>
        </div>
        
        <h3 class="text-xl font-semibold text-neutral-800 dark:text-neutral-200">
          {member.name}
        </h3>
        <p class="text-orange-500 font-medium">{member.position}</p>
        <p class="mt-2 text-neutral-600 dark:text-neutral-400">
          {member.bio}
        </p>
      </div>
    ))}
  </div>
</section>

<style>
  .grid > div {
    @apply transition-transform duration-300 hover:-translate-y-1;
  }

  .grid img {
    @apply transition-transform duration-300;
  }

  .grid > div:hover img {
    @apply scale-105;
  }
</style>