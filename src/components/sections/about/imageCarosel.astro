---
import { processLiterals } from '@utils/literalProcessor';
import { Image } from "astro:assets";
import { processImages, type ProcessedImage } from "@utils/imageProcessing";
import OptimizedImage from '@components/OptimizedImage.astro';

interface OfficeImage {
  src: string;
  alt: string;
  caption: string;
}

interface Props {
  title: string;
  description: string;
  images: OfficeImage[];
}

const { title, description, images } = processLiterals<Props>(Astro.props);

// Process images using the utility function
const processedImages: ProcessedImage[] = await processImages(
  images.map(img => img.src)
);

// Combine processed images with original metadata
const slideImages = images.map((image, index) => ({
  ...image,
  processed: processedImages[index]
})).filter(image => image.processed);
---

<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
  <div class="mx-auto max-w-2xl text-center mb-10">
    <h2 class="text-3xl font-bold text-neutral-800 dark:text-neutral-200">
      {title}
    </h2>
    <p class="mt-4 text-neutral-600 dark:text-neutral-400">
      {description}
    </p>
  </div>

  <div class="relative">
    <!-- Swiper container -->
    <div class="swiper office-slider">
      <div class="swiper-wrapper">
        {slideImages.map(image => (
          <div class="swiper-slide">
            <div class="relative aspect-[16/9] overflow-hidden rounded-lg">
              <OptimizedImage
                src={image.processed.src}
                alt={image.alt}
                width={image.processed.width}
                height={image.processed.height}
                class="w-full h-full object-cover"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex items-end">
                <p class="p-6 text-white text-lg font-medium">
                  {image.caption}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
      <!-- Navigation buttons -->
      <div class="swiper-button-prev"></div>
      <div class="swiper-button-next"></div>
      <!-- Pagination -->
      <div class="swiper-pagination"></div>
    </div>
  </div>
</section>

<!-- Swiper CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />

<!-- Swiper JS -->
<script>
  import Swiper from 'swiper';
  import { Navigation, Pagination, Autoplay } from 'swiper/modules';

  // Initialize Swiper
  const swiper = new Swiper('.office-slider', {
    modules: [Navigation, Pagination, Autoplay],
    slidesPerView: 1,
    spaceBetween: 30,
    loop: true,
    autoplay: {
      delay: 5000,
      disableOnInteraction: false,
    },
    breakpoints: {
      640: {
        slidesPerView: 1,
      },
      768: {
        slidesPerView: 2,
      },
      1024: {
        slidesPerView: 2,
      },
    },
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
    },
  });

  // Clean up on page navigation
  document.addEventListener('astro:before-swap', () => {
    swiper.destroy();
  });
</script>

<style>
  /* Swiper custom styles */
  .swiper {
    padding-bottom: 4rem;
  }

  :root {
    --swiper-theme-color: #f97316;
  }

  .swiper-button-next,
  .swiper-button-prev {
    @apply text-orange-500 bg-white w-12 h-12 rounded-full shadow-md;
  }

  .swiper-button-next::after,
  .swiper-button-prev::after {
    @apply text-base;
  }

  .swiper-pagination-bullet {
    @apply w-2.5 h-2.5;
  }

  .swiper-pagination-bullet-active {
    @apply bg-orange-500;
  }

  /* Dark mode styles */
  :global(.dark) .swiper-button-next,
  :global(.dark) .swiper-button-prev {
    @apply bg-gray-800 text-orange-500;
  }

  /* Hover effects */
  .swiper-slide {
    @apply transition-transform duration-300;
  }

  .swiper-slide:hover {
    @apply scale-[1.02];
  }
</style>