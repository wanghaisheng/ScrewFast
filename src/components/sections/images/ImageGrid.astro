---
import { processLiterals } from '@utils/literalProcessor';
import { Image } from "astro:assets";
import { processImage } from "@utils/imageProcessing";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import OptimizedImage from '@components/OptimizedImage.astro';
import type { 
  GalleryProps, 
  ProcessedGalleryData, 
  ValidRowSize,
  TextPosition 
} from '@components/sections/gallery/types';


interface Props extends GalleryProps {}


const { title, subtitle, rows } = processLiterals<Props>(Astro.props);

// 验证每行的图片数量
const validRowSizes = [1, 2, 3];
rows.forEach((row, index) => {
  if (!validRowSizes.includes(row.images.length)) {
    console.error(`Row ${index} has invalid number of images. Must be 1, 2, or 3.`);
  }
});

// 处理所有图片
const processedRows = rows.map(row => ({
  ...row,
  images: row.images.map(img => ({
    ...img,
    processed: processImage(img.src),
    textPosition: img.textPosition || 'bottom-left'
  }))
}));
---

<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
  <!-- Section Header -->
  <div class="mx-auto max-w-2xl text-center mb-10 lg:mb-14">
    <h2 class="text-3xl font-bold text-neutral-800 dark:text-neutral-200 mb-4">
      {title}
    </h2>
    {subtitle && (
      <p class="text-lg text-neutral-600 dark:text-neutral-400">
        {subtitle}
      </p>
    )}
  </div>

  <!-- Rows Container -->
  <div class="space-y-8">
    {processedRows.map((row, rowIndex) => (
      <div class={`grid gap-6 ${
        row.images.length === 1 ? 'grid-cols-1' :
        row.images.length === 2 ? 'grid-cols-1 md:grid-cols-2' :
        'grid-cols-1 md:grid-cols-2 lg:grid-cols-3'
      }`}>
        {row.images.map((image, imageIndex) => (
          <div class="group relative overflow-hidden rounded-xl bg-neutral-100 dark:bg-neutral-800">
            {/* Image */}
            {image.processed && (
              <div class="aspect-[16/9]">
                {typeof image.processed.src === 'string' ? (
                  <OptimizedImage
                    src={image.processed}
                    alt={image.alt}
                    class="w-full h-full object-cover transition duration-300 group-hover:scale-105"
                    width={image.processed.width}
                    height={image.processed.height}
                  />
                ) : (
                  <OptimizedImage
                    src={image.processed}
                    alt={image.alt}
                    class="w-full h-full object-cover transition duration-300 group-hover:scale-105"
                    width={image.processed.width}
                    height={image.processed.height}
                  />
                )}
              </div>
            )}

            {/* Overlay Content */}
            {(image.title || image.description || (image.ctas && image.ctas.length > 0)) && (
              <div class={`absolute inset-0 ${
                image.textPosition === 'top-center' 
                  ? 'bg-gradient-to-b from-black/80 via-black/50 to-transparent flex flex-col items-center justify-start pt-8'
                  : 'bg-gradient-to-t from-black/80 via-black/50 to-transparent flex flex-col justify-end p-6'
              }`}>
                <div class={`${
                  image.textPosition === 'top-center' 
                    ? 'text-center px-6 max-w-[90%]'
                    : 'w-full'
                }`}>
                  {image.title && (
                    <h3 class="text-xl font-semibold text-white mb-2">
                      {image.title}
                    </h3>
                  )}
                  {image.description && (
                    <p class={`text-white/90 ${
                      image.textPosition === 'top-center' 
                        ? 'mb-6'
                        : 'mb-4'
                    }`}>
                      {image.description}
                    </p>
                  )}
                  {image.ctas && image.ctas.length > 0 && (
                    <div class={`flex flex-wrap gap-3 ${
                      image.textPosition === 'top-center'
                        ? 'justify-center opacity-100 scale-100'
                        : 'justify-start transform translate-y-4 opacity-0 group-hover:translate-y-0 group-hover:opacity-100'
                    } transition duration-300`}>
                      {image.ctas.map(cta => (
                        cta.type === 'secondary' ? (
                          <SecondaryCTA title={cta.text} url={cta.url} />
                        ) : (
                          <PrimaryCTA title={cta.text} url={cta.url} />
                        )
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    ))}
  </div>
</section>

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .grid > div {
    animation: fadeIn 0.6s ease-out forwards;
  }

  .grid > div:nth-child(2) {
    animation-delay: 0.2s;
  }

  .grid > div:nth-child(3) {
    animation-delay: 0.4s;
  }
</style>