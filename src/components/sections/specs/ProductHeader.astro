---
import { processLiterals } from '@utils/literalProcessor';
import { Image } from 'astro:assets';

interface ProductColor {
  name: string;
  hex: string;
  image?: string;
}

interface ProductVariant {
  id: string;
  name: string;
  price: string;
  available: boolean;
}

interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  price?: string;
  image?: string;
  colors?: ProductColor[];
  defaultColor?: string;
  variants?: ProductVariant[];
  defaultVariant?: string;
  rating?: {
    score: number;
    count: number;
  };
}

const { 
  title,
  subtitle,
  description,
  price,
  image,
  colors = [],
  defaultColor = colors[0]?.name,
  variants = [],
  defaultVariant = variants[0]?.id,
  rating
} = processLiterals<Props>(Astro.props);
---

<div class="product-header relative bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-8 p-6">
    <!-- Image Section -->
    <div class="relative aspect-w-1 aspect-h-1 rounded-lg overflow-hidden bg-gray-100 dark:bg-gray-700">
      {image && (
        <img
          src={image}
          alt={title}
          class="product-image w-full h-full object-center object-cover"
          width={600}
          height={600}
        />
      )}
    </div>

    <!-- Content Section -->
    <div class="flex flex-col">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white sm:text-3xl">
        {title}
      </h1>
      
      {subtitle && (
        <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
          {subtitle}
        </p>
      )}

      {rating && (
        <div class="mt-4 flex items-center">
          <div class="flex items-center">
            {[...Array(5)].map((_, i) => (
              <svg
                class={`w-5 h-5 ${
                  i < rating.score
                    ? 'text-yellow-400'
                    : 'text-gray-300 dark:text-gray-600'
                }`}
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </div>
          <p class="ml-2 text-sm text-gray-500 dark:text-gray-400">
            ({rating.count} reviews)
          </p>
        </div>
      )}

      {description && (
        <p class="mt-4 text-gray-600 dark:text-gray-300">
          {description}
        </p>
      )}

      <!-- Price -->
      {price && (
        <p class="mt-4 text-2xl font-bold text-gray-900 dark:text-white">
          {price}
        </p>
      )}

      <!-- Color Selection -->
      {colors.length > 0 && (
        <div class="mt-6">
          <h3 class="text-sm font-medium text-gray-900 dark:text-white">
            Color
          </h3>
          <div class="mt-2">
            <div class="color-selector-group flex items-center space-x-3" role="radiogroup" aria-label="Choose color">
              {colors.map(color => (
                <button
                  class:list={[
                    "color-selector relative w-8 h-8 rounded-full border-2 border-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500",
                    color.name === defaultColor && "ring-2 ring-primary-500"
                  ]}
                  style={`background-color: ${color.hex}`}
                  data-color={color.name}
                  data-image={color.image}
                  aria-selected={color.name === defaultColor ? "true" : "false"}
                  type="button"
                >
                  <span class="sr-only">Select {color.name}</span>
                </button>
              ))}
            </div>
            <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
              Selected: <span class="selected-color">{defaultColor}</span>
            </p>
          </div>
        </div>
      )}

      <!-- Variants Selection -->
      {variants.length > 0 && (
        <div class="mt-6">
          <h3 class="text-sm font-medium text-gray-900 dark:text-white">
            Variant
          </h3>
          <div class="mt-2">
            <div class="variant-selector-group grid grid-cols-2 gap-2" role="radiogroup" aria-label="Choose variant">
              {variants.map(variant => (
                <button
                  class:list={[
                    "variant-selector relative px-4 py-2 border rounded-md text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500",
                    variant.id === defaultVariant 
                      ? "bg-primary-600 text-white border-transparent" 
                      : "bg-white dark:bg-gray-700 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600",
                    !variant.available && "opacity-50 cursor-not-allowed"
                  ]}
                  data-variant={variant.id}
                  data-price={variant.price}
                  aria-selected={variant.id === defaultVariant ? "true" : "false"}
                  disabled={!variant.available}
                  type="button"
                >
                  {variant.name}
                  {!variant.available && (
                    <span class="absolute inset-0 flex items-center justify-center">
                      <span class="text-xs text-gray-500">Out of Stock</span>
                    </span>
                  )}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  // Color selection handling
  document.querySelectorAll<HTMLButtonElement>('.color-selector').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLButtonElement;
      const header = target.closest<HTMLDivElement>('.product-header');
      
      if (!header) return;
      
      const colorName = target.getAttribute('data-color');
      if (!colorName) return;

      // Update active state of buttons
      header.querySelectorAll<HTMLButtonElement>('.color-selector').forEach(btn => {
        btn.classList.remove('ring-2', 'ring-primary-500');
        btn.setAttribute('aria-selected', 'false');
      });

      // Set active state for clicked button
      target.classList.add('ring-2', 'ring-primary-500');
      target.setAttribute('aria-selected', 'true');

      // Update color name display
      const colorDisplay = header.querySelector<HTMLSpanElement>('.selected-color');
      if (colorDisplay) {
        colorDisplay.textContent = colorName;
      }

      // Update product image if available
      const imageUrl = target.getAttribute('data-image');
      if (imageUrl) {
        const productImage = header.querySelector<HTMLImageElement>('.product-image');
        if (productImage) {
          productImage.src = imageUrl;
          productImage.alt = `${header.querySelector('h1')?.textContent} in ${colorName}`;
        }
      }

      // Dispatch custom event
      const event = new CustomEvent('colorChange', {
        detail: { color: colorName, image: imageUrl }
      });
      header.dispatchEvent(event);
    });
  });

  // Variant selection handling
  document.querySelectorAll<HTMLButtonElement>('.variant-selector').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLButtonElement;
      if (target.disabled) return;

      const header = target.closest<HTMLDivElement>('.product-header');
      if (!header) return;

      const variantId = target.getAttribute('data-variant');
      if (!variantId) return;

      // Update active state of buttons
      header.querySelectorAll<HTMLButtonElement>('.variant-selector').forEach(btn => {
        btn.classList.remove('bg-primary-600', 'text-white');
        btn.classList.add('bg-white', 'dark:bg-gray-700');
        btn.setAttribute('aria-selected', 'false');
      });

      // Set active state for clicked button
      target.classList.remove('bg-white', 'dark:bg-gray-700');
      target.classList.add('bg-primary-600', 'text-white');
      target.setAttribute('aria-selected', 'true');

      // Update price if available
      const price = target.getAttribute('data-price');
      if (price) {
        const priceDisplay = header.querySelector<HTMLParagraphElement>('.product-price');
        if (priceDisplay) {
          priceDisplay.textContent = price;
        }
      }

      // Dispatch custom event
      const event = new CustomEvent('variantChange', {
        detail: { 
          variantId,
          price
        }
      });
      header.dispatchEvent(event);
    });
  });
</script>

<style>
  .color-selector {
    transition: all 0.2s ease-in-out;
  }

  .color-selector:hover {
    transform: scale(1.1);
  }

  .color-selector[aria-selected="true"] {
    transform: scale(1.1);
    box-shadow: 0 0 0 2px var(--color-primary-500);
  }

  .variant-selector {
    transition: all 0.2s ease-in-out;
  }

  .variant-selector:not(:disabled):hover {
    transform: translateY(-1px);
  }

  .variant-selector[aria-selected="true"] {
    font-weight: 600;
  }

  /* Dark mode transitions */
  .dark .dark\:bg-gray-800,
  .dark .dark\:bg-gray-700 {
    transition: background-color 0.3s ease;
  }

  /* Responsive image container */
  .aspect-w-1 {
    position: relative;
    padding-bottom: 100%;
  }

  .aspect-w-1 img {
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    object-fit: cover;
  }

  @media (prefers-reduced-motion: reduce) {
    .color-selector,
    .variant-selector {
      transition: none;
    }
  }
</style>