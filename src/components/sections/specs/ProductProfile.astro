---
import { processLiterals } from '@utils/literalProcessor';
import type { Product, SpecEntry } from '@/types/products';
interface Props {
  products: Product[] | SpecEntry[];
}

const { products } = processLiterals<Props>(Astro.props);

function isSpecEntry(product: Product | SpecEntry): product is SpecEntry {
  return 'collection' in product;
}

function getProductData(product: Product | SpecEntry) {
  if (isSpecEntry(product)) {
    return {
      id: product.data.productId,
      name: product.data.title,
      image: product.data.image || '',
      description: product.data.description,
      keySpecs: product.data.keySpecs || [],
      highlights: product.data.highlights || [],
    };
  }
  return {
    id: product.id,
    name: product.name,
    image: product.image,
    description: product.description,
    keySpecs: product.keySpecs || [],
    highlights: product.highlights,
  };
}
---

<div class="product-profiles">
  {products.map(product => {
    const data = getProductData(product);
    return (
      <div class="product-profile">
        <h3>{data.name}</h3>
        {data.image && <img src={data.image} alt={data.name} />}
        <p>{data.description}</p>
        
        {data.keySpecs.length > 0 && (
          <div class="key-specs">
            <h4>Key Specifications</h4>
            <ul>
              {data.keySpecs.map(spec => (
                <li>
                  <span>{spec.label}:</span> {spec.value}
                </li>
              ))}
            </ul>
          </div>
        )}

        {data.highlights.length > 0 && (
          <div class="highlights">
            <h4>Highlights</h4>
            <ul>
              {data.highlights.map(highlight => (
                <li>
                  <span class="icon">{highlight.icon}</span>
                  <h5>{highlight.title}</h5>
                  <p>{highlight.description}</p>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  })}
</div>
