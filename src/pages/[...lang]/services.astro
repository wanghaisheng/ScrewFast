---
import MainLayout from "@/layouts/MainLayout.astro";
import MainSection from "@components/ui/blocks/MainSection.astro";
import LeftSection from "@components/ui/blocks/LeftSection.astro";
import RightSection from "@components/ui/blocks/RightSection.astro";
import FeaturesStats from "@components/sections/features/FeaturesStats.astro";
import siteconfig from "@data/site.json";
export async function getStaticPaths() {
  const supportedLanguages = siteconfig.supportedLanguages;
  return supportedLanguages.map((lang) => ({
    params: { lang },
    props: { lang },
  }));
}

const { lang = "en" } = Astro.params;

console.log("Services Current language:", lang);

if (!lang) {
  throw new Error("Language parameter is missing!");
}

const servicesData = await import(`../../data_files/${lang}/services.json`).catch(() => ({
  pageTitle: "Services",
  mainSection: {},
  articles: [],
  featuresStats: {},
}));

const navlinkData = await import(`../../data_files/${lang}/nav.json`).catch(() => ({
  nav: [],
}));

const resolveImagePath = (imageName?: string): string | undefined =>
  imageName ? `/src/images/${imageName}` : undefined;

interface Article {
  isRightSection: boolean;
  title: string;
  subTitle: string;
  btnExists?: boolean;
  btnTitle?: string;
  btnURL?: string;
  single?: boolean;
  img?: string;
  imgAlt?: string;
  imgOne?: string;
  imgOneAlt?: string;
  imgTwo?: string;
  imgTwoAlt?: string;
}

// RightSection Props Interface
export interface RightSectionProps {
  title: string; // Required title of the section
  subTitle: string; // Required subtitle of the section
  btnExists?: boolean; // Optional boolean indicating if a button exists
  btnTitle?: string; // Optional title of the button
  btnURL?: string; // Optional URL for the button
  single?: boolean; // Optional flag for rendering a single image
  imgOne?: string; // Optional URL for the first image
  imgOneAlt?: string; // Optional alt text for the first image
  imgTwo?: string; // Optional URL for the second image (only used if single is false)
  imgTwoAlt?: string; // Optional alt text for the second image
}

// LeftSection Props Interface
interface LeftSectionProps {
  title: string; // Required title of the section
  subTitle: string; // Required subtitle of the section
  btnExists?: boolean; // Optional boolean indicating if a button exists
  btnTitle?: string; // Optional title of the button
  btnURL?: string; // Optional URL for the button
  img: string; // Optional image URL
  imgAlt: string; // Optional alt text for the image
}

// Process articles by resolving image paths
const processedArticles = servicesData.articles.map((article: Article) => ({
  ...article,
  imgOne: resolveImagePath(article.imgOne),
  imgTwo: resolveImagePath(article.imgTwo),
  img: resolveImagePath(article.img),
}));

// Filter articles into left and right sections

const rightSectionArticles = servicesData.articles.filter((article: Article) => article.isRightSection);
const leftSectionArticles = processedArticles
  .filter((article: Article) => !article.isRightSection)
  .map((article:Article) => ({
    ...article,
    img: article.img || "", // Provide default empty string for img if undefined
    imgAlt: article.imgAlt || "Default alt text", // Provide fallback alt text if undefined
  }));

// Assign filtered data for later use
const leftSectionSettings: LeftSectionProps[] = leftSectionArticles;
const rightSectionSettings: RightSectionProps[] = rightSectionArticles;
---

<MainLayout
  title={`${servicesData.pageTitle} | ${siteconfig.SITE.title}`}
  navdata={navlinkData}
  supportedLangLabels={siteconfig.supportedLangLabels}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "WebPage",
    "@id": `${siteconfig.SITE.url}/${lang}/services`,
    "url": `${siteconfig.SITE.url}/${lang}/services`,
    "name": servicesData.pageTitle,
    "description": servicesData.mainSection.subTitle,
    "isPartOf": {
      "@type": "WebSite",
      "url": siteconfig.SITE.url,
      "name": siteconfig.SITE.title,
      "description": siteconfig.SITE.description,
    },
    "inLanguage": lang,
  }}
>
  <!-- Render Main Section -->
  <MainSection {...servicesData.mainSection} />

  <!-- Render Right Sections -->
  {rightSectionSettings.map((article) => (
    <RightSection {...article} />
  ))}

  <!-- Render Left Sections -->
  {leftSectionSettings.map((article) => (
    <LeftSection {...article} />
  ))}

  <!-- Render Features Stats Section -->
  <FeaturesStats {...servicesData.featuresStats} />
</MainLayout>
