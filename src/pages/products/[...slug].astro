---
import { getCollection } from "astro:content";
import siteconfig from "@data/site.json";
import { getUserLanguagePreference } from '@utils/language';

// Get default language from config or fallback to 'en'
const defaultLang = siteconfig.defaultlang || 'en';

// Generate paths for default language redirects
export async function getStaticPaths() {
  const products = await getCollection('products');
  const defaultLang = siteconfig.defaultlang || 'en';

  // Get all products in default language
  const defaultLangProducts = products.filter(product => 
    product.id.startsWith(`${defaultLang}/`)
  );

  // Create redirect paths for default language
  return defaultLangProducts.map(product => {
    const slug = product.slug.replace(`${defaultLang}/`, '');
    return {
      params: { slug },
    };
  });
}

// Get the slug from params
const { slug } = Astro.params;

// Get user's preferred language
const userLang = getUserLanguagePreference(Astro.request, siteconfig.supportedLanguages, defaultLang);

// Check if the product exists in the user's preferred language
const products = await getCollection('products');
const productExists = products.some(product => 
  product.id.startsWith(`${userLang}/`) && 
  product.slug.replace(`${userLang}/`, '') === slug
);

// Redirect to the user's preferred language if the product exists,
// otherwise fallback to default language
const redirectLang = productExists ? userLang : defaultLang;

return Astro.redirect(`/${redirectLang}/products/${slug}/`);
---